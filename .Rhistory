nuevo_x <- c(4, 6, 9)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
# Realizar predicciones
nuevo_x <- c(6, 7, 8)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
plot(predicciones)
# Imprimir las predicciones
cat("Predicciones para nuevo_x:", predicciones, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, predicciones, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
predicciones
# Realizar predicciones
nuevo_x <- c(6, 7, 8)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
# Datos de ejemplo
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Imprimir los coeficientes
cat("Coeficiente de la intersección (b0):", coeficientes[1], "\n")
cat("Coeficiente de la pendiente (b1):", coeficientes[2], "\n")
# Realizar predicciones
nuevo_x <- c(6, 7, 8)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las predicciones
cat("Predicciones para nuevo_x:", predicciones, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, predicciones, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
coeficientes
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar predicciones
nuevo_x <- c(6, 7, 8)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las predicciones
cat("Predicciones para nuevo_x:", predicciones, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, predicciones, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# Realizar predicciones
nuevo_x <- c(6)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las predicciones
cat("Predicciones para nuevo_x:", predicciones, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, predicciones, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# predecir el num de usuarios que van a tener 6, 7 y 8 alergias
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar prediccion
nuevo_x <- c(6)
prediccion <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "prediccion"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# ajusta un modelo de regresión polinomial de segundo grado
horas_de_estudio <- c(2,4,6,8,10,12)
calificaciones <- c(60,70,80,90,95,100,100)
# crear una matriz de diseño para el modelo de regresion polinomial
# elevamos las horas de estudio al cuadrado para hacer el modelo
X <- data.frame(x=horas_de_estudio,x2=horas_de_estudio^2)
# ajustamos un modelo de regresion polinomioal de segundo grado
modelo <- lm(calificaciones~X$x + X$x2)
summary(modelo) # mostrar el resumen del modelo
# graficar la relacion ajustada
plot(horas_de_estudio,calificaciones,main="regresion polinomial de 2do grado",
xlab = "horas de estudio",ylab="calificaciones")
n=data.frame(x=x3,x2=x3^2)
y=predict(modelo,n)
lines(X$x,y,col="red")
# Datos de ejemplo
x <- c(2, 3, 5, 7, 8)
y <- c(5, 7, 11, 15, 17)
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Imprimir los coeficientes
cat("Coeficiente de la intersección (b0):", coeficientes[1], "\n")
cat("Coeficiente de la pendiente (b1):", coeficientes[2], "\n")
# Realizar predicciones
nuevo_x <- c(4, 6, 9)
predicciones <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las predicciones
cat("Predicciones para nuevo_x:", predicciones, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, predicciones, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
source("C:/Users/ar/Desktop/reporte-alergias/reg_lineal_profe.R", encoding = 'UTF-8')
source("C:/Users/ar/Desktop/reporte-alergias/reg_lineal_profe.R", encoding = 'UTF-8')
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN
k <- 3  # Número de vecinos más cercanos a considerar
modelo <- knn.reg(train = matrix(x), test = matrix(nuevo_x), y = y, k = k)
# Imprimir la predicción
cat("Predicción para nuevo_x:", modelo, "\n")
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN
k <- 3  # Número de vecinos más cercanos a considerar
modelo <- knn.reg(train = matrix(x), test = matrix(nuevo_x), y = y, k = k)
modelo <- knn(train = matrix(x), test = matrix(nuevo_x), y = y, k = k)
source("C:/Users/ar/Desktop/reporte-alergias/knn.R", encoding = 'UTF-8')
source("C:/Users/ar/Desktop/reporte-alergias/knn.R", encoding = 'UTF-8')
source("C:/Users/ar/Desktop/reporte-alergias/knn.R", encoding = 'UTF-8')
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# predecir el num de usuarios que van a tener 6 alergias usando KNN
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# numero_repetido.R
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando KNN
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
nuevo_x <- c(6) # cuando x=6 que valor habrá
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
# numero_repetido.R
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando KNN
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
nuevo_x <- c(6) # cuando x=6 que valor habrá
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c( "red"), pch = c(1, 16))
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c( "red"), pch = c(1, 16))
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
nuevo_x <- c(6) # cuando x=6 qué valor habrá en y
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
nuevo_x <- c(6,7,8) # cuando x=6 qué valor habrá en y
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
# numero_repetido.R
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando KNN
library(class)
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
nuevo_x <- c(7) # cuando x=6 qué valor habrá en y
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
# Datos de ejemplo
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo KNN ponderado
k <- 3  # Número de vecinos más cercanos a considerar
nuevo_x <- c(7) # cuando x=6 qué valor habrá en y
prediccion <- knn(train = matrix(x), test = matrix(nuevo_x), cl = y, k = k, prob = TRUE, use.all = TRUE)
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y la predicción
plot(x, y, main = "KNN Ponderado - Regresión", xlab = "x", ylab = "y")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
source("C:/Users/ar/Desktop/reporte-alergias/knn.R", encoding = 'UTF-8')
# Imprimir la predicción
cat("Predicción para nuevo_x:", prediccion, "\n")
# numero_repetido.R
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando reg. lineal
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar prediccion
nuevo_x <- c(6)
prediccion <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "prediccion"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar prediccion
nuevo_x <- c(6)
prediccion <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Predicción"), col = c("black", "red"), pch = c(1, 16))
# numero_repetido.R
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando reg. lineal
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar prediccion
nuevo_x <- c(6)
prediccion <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando reg. lineal
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar prediccion
nuevo_x <- c(6)
prediccion <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Moodelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
legend("topleft", legend = c("Datos de entrenamiento", "Moodelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Moodelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
# numero_repetido.R
# Cargar el dataset
data <- read.csv("usuarios.csv", sep=";")
# elegir la columna numero_alergias del DS
num_alergias <- data$numero_alergias
# tabla de frecuencias de los numeros de alergias
frecuencia_num_alergias <- table(num_alergias)
# ordenar frecuencias de la tabla de manera descendente
frecuencia_num_alergias_ordenadas <- sort(frecuencia_num_alergias,decreasing = TRUE)
# elegir la alergia #1
num_alergia_mas_frecuente <- names(frecuencia_num_alergias_ordenadas)[1]
# imprimir solución
plot(frecuencia_num_alergias_ordenadas,
ylab="Numero de alergias",xlab="Cantidad de usuarios")
cat("Es más común que los usuarios tengan", num_alergia_mas_frecuente, "alergias")
# predecir el num de usuarios que van a tener 6 alergias usando reg. lineal
datos <- data.frame(frecuencia_num_alergias_ordenadas)
x <- as.numeric(datos$num_alergias)
y <- datos$Freq
# Ajuste del modelo de regresión lineal
modelo <- lm(y ~ x)
# Resumen del modelo
summary(modelo)
# Obtener los coeficientes de la regresión
coeficientes <- coef(modelo)
# Realizar prediccion
nuevo_x <- c(6)
prediccion <- predict(modelo, data.frame(x = nuevo_x))
# Imprimir las prediccion
cat("prediccion para nuevo_x:", prediccion, "\n")
# Graficar los datos de entrenamiento y el modelo ajustado
plot(x, y, main = "Regresión Lineal Simple", xlab = "x", ylab = "y")
abline(modelo, col = "blue")
points(nuevo_x, prediccion, col = "red", pch = 16)
legend("topleft", legend = c("Datos de entrenamiento", "Modelo ajustado", "Predicciones"), col = c("black", "blue", "red"), pch = c(1, NA, 16))
